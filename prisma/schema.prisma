// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
// done
model Course {
  id           Int            @id @default(autoincrement())
  name         String
  thumbnail    String
  createdAt    DateTime       @default(now())
  description  String @db.LongText
  updatedAt    DateTime?      @updatedAt
  deletedAt    DateTime?
  status       Int            @default(1)
  Lesson       Lesson[]
  UserProgress UserProgress[]
  CourseReceived CourseReceived[]
}
model CourseReceived {
  id         Int      @id @default(autoincrement())
  name    String
  course_id   Int
  Course     Course   @relation(fields: [course_id], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime? @updatedAt
  status Int @default(1)
  deletedAt DateTime? 
}
// done
model Lesson {
  id               Int             @id @default(autoincrement())
  title            String
  content          String          @db.LongText
  createdAt        DateTime        @default(now())
  updatedAt        DateTime?       @updatedAt
  ownership_course Course          @relation(fields: [course_id], references: [id])
  course_id        Int
  status           Int             @default(1)
  deletedAt        DateTime?
  videoUrl         String?         // Lưu trữ đường link YouTube hoặc các đường link video khác
  videoFile        String?         // Lưu trữ tên file hoặc đường dẫn tới file video tải lên từ client
  Quiz             Quiz[]
  UserProgress     UserProgress[]
  CommentLesson    CommentLesson[]
}

// done
model Quiz {
  id               Int            @id @default(autoincrement())
  onwership_Lesson Lesson         @relation(fields: [lesson_id], references: [id])
  lesson_id        Int
  answer           String
  status           Int            @default(1)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime?      @updatedAt
  deletedAt        DateTime?
  UserProgress     UserProgress[]
}

// done
model User {
  id             Int              @id @default(autoincrement())
  username       String
  email          String           @unique
  password       String
  avatar         String?
  refresh_token  String?          @db.LongText
  status         Int              @default(1)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime?        @updatedAt
  deletedAt      DateTime?
  roles          String           @default("User")
  posts          Post[]
  UserProgress   UserProgress[]
  Comment        CommentPost[]
  CommentLesson  CommentLesson[]
  SavedPost      SavedPost[]
}

// done
model UserProgress {
  id                Int       @id @default(autoincrement())
  author            User      @relation(fields: [author_id], references: [id])
  author_id         Int
  ownership_course Course?   @relation(fields: [course_id], references: [id])
  course_id         Int?
  ownership_lesson  Lesson?   @relation(fields: [lesson_id], references: [id])
  lesson_id         Int?
  onwership_quiz    Quiz?     @relation(fields: [quiz_id], references: [id])
  quiz_id           Int?
  score             Int?
  status            Int       @default(1)
  deletedAt         DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime? @updatedAt
}

// done
model CommentLesson {
  id               Int       @id @default(autoincrement())
  message          String   @db.LongText
  author           User      @relation(fields: [author_id], references: [id])
  author_id        Int
  ownership_lesson Lesson    @relation(fields: [lesson_id], references: [id])
  lesson_id        Int
  reply             Int?
  status           Int       @default(1)
  deletedAt        DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime? @updatedAt
}

// done
model Post {
  id         Int           @id @default(autoincrement())
  title      String
  thumbnail  String
  summary    String        @db.LongText
  content    String        @db.LongText
  status     Int           @default(1)
  owner      User          @relation(fields: [ownerId], references: [id])
  ownerId    Int
  category   Category      @relation(fields: [categoryId], references: [id])
  categoryId Int
  createdAt  DateTime      @default(now())
  updatedAt  DateTime?     @updatedAt
  deletedAt  DateTime?
  Comment    CommentPost[]
  SavedPost  SavedPost[]
}

// done
model Category {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  status      Int          @default(1)
  deletedAt   DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime?    @updatedAt
  Post        Post[]
}

// done
model CommentPost {
  id             Int       @id @default(autoincrement())
  message        String   @db.LongText
  author         User      @relation(fields: [author_id], references: [id])
  author_id      Int
  ownership_post Post      @relation(fields: [post_id], references: [id])
  post_id        Int
  reply Int?
  status         Int       @default(1)
  deletedAt      DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime? @updatedAt
}

// done
model SavedPost {
  id             Int       @id @default(autoincrement())
  author         User      @relation(fields: [author_id], references: [id])
  author_id      Int
  ownership_post Post      @relation(fields: [post_id], references: [id])
  post_id        Int
  status         Int       @default(1)
  deletedAt      DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime? @updatedAt
}

